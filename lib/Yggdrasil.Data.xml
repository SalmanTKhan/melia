<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Yggdrasil.Data</name>
    </assembly>
    <members>
        <member name="T:Yggdrasil.Data.ApplicationData">
            <summary>
            Manages databases.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.ApplicationData.#ctor">
            <summary>
            Creates new instance, loading all databases found in the
            executing assembly.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.ApplicationData.AutoLoad">
            <summary>
            Loads all databases found in the executing assembly.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.ApplicationData.Get``1">
            <summary>
            Returns database with given type.
            </summary>
            <typeparam name="TDatabase"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.Binary.DatabaseBinaryBase">
            <summary>
            A compressed file database that stores binary data.
            </summary>
        </member>
        <member name="F:Yggdrasil.Data.Binary.DatabaseBinaryBase.Warnings">
            <summary>
            Warnings that occurred during load.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryBase.GetWarnings">
            <summary>
            Returns all warnings that occured while loading the database.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryBase.LoadFile(System.String)">
            <summary>
            Loads the database from the given file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryBase.AfterLoad">
            <summary>
            Called at the end of LoadFile.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryBase.Read(System.IO.FileStream)">
            <summary>
            Reads entries from binary reader.
            </summary>
            <param name="fs"></param>
        </member>
        <member name="T:Yggdrasil.Data.Binary.DatabaseBinary`1">
            <summary>
            A compressed file database that stores binary data.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:Yggdrasil.Data.Binary.DatabaseBinary`1.Entries">
            <summary>
            The database's entries.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.Binary.DatabaseBinary`1.Count">
            <summary>
            Returns the number of entries in the database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinary`1.Add(`0)">
            <summary>
            Adds the entry to the database.
            </summary>
            <param name="data"></param>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinary`1.Clear">
            <summary>
            Removes all entries from the database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinary`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Returns the first entry that matches the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinary`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2">
            <summary>
            A compressed file database that stores binary data.
            </summary>
            <typeparam name="TIndex"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="F:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Entries">
            <summary>
            The database's entries.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Count">
            <summary>
            Returns the number of entries in the database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Add(`0,`1)">
            <summary>
            Adds the entry to the database if it doesn't exist yet.
            Returns true if it was added succesfully.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.AddOrReplace(`0,`1)">
            <summary>
            Adds the entry to the database. If the index already exists
            the entry is replaced. Returns whether data was replaced or not.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Clear">
            <summary>
            Removes all entries from the database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Contains(`0)">
            <summary>
            Returns true if the database contains an element with the
            given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Find(System.Func{`1,System.Boolean})">
            <summary>
            Returns the first entry that matches the given predicate.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.FindAll(System.Func{`1,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.Find(`0)">
            <summary>
            Returns entry with the given index if it exists, or null if
            it doesn't.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.TryFind(`0,`1@)">
            <summary>
            Returns the entry with the given index via out. Returns false
            if the index wasn't found.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.Binary.DatabaseBinaryIndexed`2.TryFind(System.Func{`1,System.Boolean},`1@)">
            <summary>
            Returns the first entry matching the given predicate via out.
            Returns false if no matches were found.
            </summary>
            <param name="predicate"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.CSV.CsvEntry">
            <summary>
            Represents a line in a CSV file, allowing simple access its data.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvEntry.Fields">
            <summary>
            The raw values in this entry.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvEntry.Line">
            <summary>
            The line number of this entry.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvEntry.LastIndex">
            <summary>
            Returns the last index that was read.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvEntry.Count">
            <summary>
            The amount of values in this entry.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.#ctor(System.Collections.Generic.List{System.String},System.Int32)">
            <summary>
            Creates new instance.
            </summary>
            <param name="fields"></param>
            <param name="line"></param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.IsFieldEmpty(System.Int32)">
            <summary>
            Returns whether the value at the given index is null or
            white-space.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.GetValAndBase(System.Int32,System.String@,System.Int32@)">
            <summary>
            Reads value from index and returns a value and the base to
            read it as via out.
            </summary>
            <param name="index"></param>
            <param name="val"></param>
            <param name="fromBase"></param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadBool(System.Int32,System.Boolean)">
            <summary>
            Returns value at given index as bool. Valid values for "true"
            are "1", "true", and "yes".
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadByte(System.Int32,System.Byte)">
            <summary>
            Returns value at given index as byte.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadSByte(System.Int32,System.SByte)">
            <summary>
            Returns value at given index as sbyte.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadShort(System.Int32,System.Int16)">
            <summary>
            Returns value at given index as short.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadUShort(System.Int32,System.UInt16)">
            <summary>
            Returns value at given index as ushort.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadInt(System.Int32,System.Int32)">
            <summary>
            Returns value at given index as int.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadUInt(System.Int32,System.UInt32)">
            <summary>
            Returns value at given index as uint.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadLong(System.Int32,System.Int64)">
            <summary>
            Returns value at given index as long.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadULong(System.Int32,System.UInt64)">
            <summary>
            Returns value at given index as ulong.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadFloat(System.Int32,System.Single)">
            <summary>
            Returns value at given index as float.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadDouble(System.Int32,System.Double)">
            <summary>
            Returns value at given index as double.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadString(System.Int32,System.String)">
            <summary>
            Returns value at given index as string.
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadStringList(System.Int32,System.String[])">
            <summary>
            Returns values at given index as list of strings, seperated by
            colons (:).
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvEntry.ReadIntList(System.Int32,System.Int32[])">
            <summary>
            Returns values at given index as list of strings, seperated by
            colons (:).
            </summary>
            <param name="index"></param>
            <param name="def"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.CSV.CsvReader">
            <summary>
            Reader for CSV data.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvReader.Stream">
            <summary>
            The stream this instance reads from.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvReader.Path">
            <summary>
            The path to the file that is being read.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvReader.Seperator">
            <summary>
            The character that seperates two values.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvReader.#ctor(System.IO.Stream,System.String,System.Char)">
            <summary>
            Creates a new instance, reading data from stream,
            using path for reference.
            </summary>
            <param name="stream">Stream to read data from.</param>
            <param name="path">Path of the file the data is coming from, for reference.</param>
            <param name="seperator">Character seperating values.</param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvReader.Next">
            <summary>
            Reads the next line from the file and returns its data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvReader.GetValues(System.String)">
            <summary>
            Reads raw data from given line.
            </summary>
            <param name="csvLine"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.CSV.DatabaseCsvBase">
            <summary>
            A text-based database using CSV.
            </summary>
        </member>
        <member name="F:Yggdrasil.Data.CSV.DatabaseCsvBase.Warnings">
            <summary>
            Warnings that occurred during load.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvBase.#ctor">
            <summary>
            Initializes instance.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvBase.GetWarnings">
            <summary>
            Returns warnings that occured while loading data.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvBase.LoadFile(System.String)">
            <summary>
            Loads data from given file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvBase.AfterLoad">
            <summary>
            Called at the end of LoadFile.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvBase.ReadEntry(Yggdrasil.Data.CSV.CsvEntry)">
            <summary>
            Reads entry and adds information to database.
            </summary>
            <param name="entry"></param>
        </member>
        <member name="T:Yggdrasil.Data.CSV.DatabaseCsv`1">
            <summary>
            A text-based database using CSV.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Yggdrasil.Data.CSV.DatabaseCsv`1.Count">
            <summary>
            Returns number of entries in the database.
            </summary>
        </member>
        <member name="F:Yggdrasil.Data.CSV.DatabaseCsv`1.Entries">
            <summary>
            The database's entries.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsv`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Searches for first entry that matches the given predicate
            and returns it, or null if no matches were found.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsv`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsv`1.Clear">
            <summary>
            Removes all entries from database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsv`1.Add(`0)">
            <summary>
            Adds data to database.
            </summary>
            <param name="data"></param>
        </member>
        <member name="T:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2">
            <summary>
            A text-based database using CSV.
            </summary>
            <typeparam name="TIndex"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="P:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Count">
            <summary>
            Returns number of entries in the database.
            </summary>
        </member>
        <member name="F:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Entries">
            <summary>
            The database's entries.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Contains(`0)">
            <summary>
            Returns true if the database contains an element with the
            given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Find(System.Func{`1,System.Boolean})">
            <summary>
            Searches for first entry that matches the given predicate
            and returns it, or null if no matches were found.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Find(`0)">
            <summary>
            Returns the entry with the given index, or null if it
            wasn't found.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.TryFind(`0,`1@)">
            <summary>
            Returns the entry with the given index via out. Returns false
            if the index wasn't found.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.TryFind(System.Func{`1,System.Boolean},`1@)">
            <summary>
            Returns the first entry matching the given predicate via out.
            Returns false if no matches were found.
            </summary>
            <param name="predicate"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.FindAll(System.Func{`1,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Clear">
            <summary>
            Removes all entries from database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.Add(`0,`1)">
            <summary>
            Adds data to database, fails and returns false if index exists
            already.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.DatabaseCsvIndexed`2.AddOrReplace(`0,`1)">
            <summary>
            Adds data to database, replacing potentially existing values.
            Returns whether data was replaced or not.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
        </member>
        <member name="T:Yggdrasil.Data.CSV.MinFieldCountAttribute">
            <summary>
            Marks a CSV database to required at least the given amount amount
            of values in a line.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.MinFieldCountAttribute.Count">
            <summary>
            Number of required values.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.MinFieldCountAttribute.#ctor(System.Int32)">
            <summary>
            Creates new instance.
            </summary>
            <param name="count"></param>
        </member>
        <member name="T:Yggdrasil.Data.CSV.CsvDatabaseWarningException">
            <summary>
            A minor issue encountered while reading data from a CSV database.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.CSV.CsvDatabaseWarningException.Line">
            <summary>
            The line the issue occurred on.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvDatabaseWarningException.#ctor(System.String,System.Int32,System.String)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="source"></param>
            <param name="line"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yggdrasil.Data.CSV.CsvDatabaseWarningException.ToString">
            <summary>
            Returns string representation of this exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.CSV.FieldCountException">
            <summary>
            A minor issue where a CSV line didn't have the expected amount
            of values.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.CSV.FieldCountException.#ctor(System.Int32,System.Int32)">
            <summary>
            Creates a new instance.
            </summary>
            <param name="expectedAmount"></param>
            <param name="amount"></param>
        </member>
        <member name="T:Yggdrasil.Data.IDatabase">
            <summary>
            A database that can load data.
            </summary>
        </member>
        <member name="P:Yggdrasil.Data.IDatabase.Count">
            <summary>
            Returns the number of entries in the database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase.Clear">
            <summary>
            Removes all entries from database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase.LoadFile(System.String)">
            <summary>
            Loads data from file.
            </summary>
            <param name="filePath"></param>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase.GetWarnings">
            <summary>
            Returns warnings that occurred while loading data.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.IDatabase`1">
            <summary>
            A database that can load data and stores it as the given type.
            </summary>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase`1.Find(System.Func{`0,System.Boolean})">
            <summary>
            Searches for first entry that matches the given predicate
            and returns it, or null if no matches were found.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase`1.FindAll(System.Func{`0,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabase`1.Add(`0)">
            <summary>
            Adds data to database.
            </summary>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.IDatabaseIndexed`2">
            <summary>
            A database that can load data and stores it as the given type,
            indexed by the given index type.
            </summary>
            <typeparam name="TIndex"></typeparam>
            <typeparam name="TData"></typeparam>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.Contains(`0)">
            <summary>
            Returns true if the database contains an element with the
            given index.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.Find(System.Func{`1,System.Boolean})">
            <summary>
            Searches for first entry that matches the given predicate
            and returns it, or null if no matches were found.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.Find(`0)">
            <summary>
            Returns the entry with the given index, or null if it
            wasn't found.
            </summary>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.TryFind(`0,`1@)">
            <summary>
            Returns the entry with the given index via out. Returns false
            if the index wasn't found.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.TryFind(System.Func{`1,System.Boolean},`1@)">
            <summary>
            Returns the first entry matching the given predicate via out.
            Returns false if no matches were found.
            </summary>
            <param name="predicate"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.FindAll(System.Func{`1,System.Boolean})">
            <summary>
            Searches for entries that match the given predicate
            and returns them.
            </summary>
            <param name="predicate"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.Add(`0,`1)">
            <summary>
            Adds data to database, fails and returns false if index exists
            already.
            </summary>
            <param name="index"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:Yggdrasil.Data.IDatabaseIndexed`2.AddOrReplace(`0,`1)">
            <summary>
            Adds data to database, replacing potentially existing values.
            Returns whether data was replaced or not.
            </summary>
            <param name="data"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.DatabaseWarningException">
            <summary>
            Information about a minor issue that was encountered while
            reading a database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.DatabaseWarningException.#ctor(System.String,System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="source"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yggdrasil.Data.DatabaseWarningException.ToString">
            <summary>
            Returns string representation of this exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.DatabaseErrorException">
            <summary>
            Information about a major issue that was encountered while
            reading a database.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.DatabaseErrorException.#ctor(System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="msg"></param>
        </member>
        <member name="M:Yggdrasil.Data.DatabaseErrorException.#ctor(System.String,System.String)">
            <summary>
            Creates new instance.
            </summary>
            <param name="source"></param>
            <param name="msg"></param>
        </member>
        <member name="M:Yggdrasil.Data.DatabaseErrorException.ToString">
            <summary>
            Returns string representation of this exception.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Yggdrasil.Data.StreamExtensions">
            <summary>
            Extentions for Stream.
            </summary>
        </member>
        <member name="M:Yggdrasil.Data.StreamExtensions.CopyTo(System.IO.Stream,System.IO.Stream)">
            <summary>
            Copies the contents of the first stream into the second one.
            </summary>
            <param name="input"></param>
            <param name="output"></param>
        </member>
    </members>
</doc>
